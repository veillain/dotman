#! /usr/bin/env bash

# Checking config
CONFIG_PATH="$HOME/.config"
DOTMAN_PATH="$HOME/.config/dotman"
DOTMAN_FILE="$HOME/.config/dotman/config.sh"
DOTFILE_PATH=$(cat ${DOTMAN_FILE} | grep path | awk '{print $3}')
if [ ! -d "$DOTMAN_PATH" ]; then
    mkdir -p ${DOTMAN_PATH}
    echo "path = $HOME/dotfiles" > ${DOTMAN_FILE}
fi

# Prompt Variables
option=$1
choice=$(echo $@ | grep -oP "(?<=${option} ).*")

# Main Variables
CONFIG_LIST=$(ls ${DOTFILE_PATH}/.config/${PKGS})

function set() {
    if [ -z "$choice" ]; then
        echo "Usage: dotman set </path/to/your/dotfiles>"
    elif [[ "$choice" = . ]]; then
        rn=$(pwd)
        echo "path = $rn" > $DOTMAN_FILE
        if [ $? -eq 0 ]; then
            echo "Dotfiles path changed to '$rn'"
        else
            echo "Failed to change the path"
        fi
    else
        echo "path = $choice" > $DOTMAN_FILE
        if [ $? -eq 0 ]; then
            echo "Dotfiles path changed to '$choice'"
        else
            echo "Failed to change the path"
        fi
    fi
}

function remove() {
    echo ":: Processing dotfiles changes..."
    totalnumber=0
    number=1
    for PKGS in ${choice[@]}; do
        totalnumber=$(($totalnumber + 1))
    done
    for PKGS in ${choice[@]}; do
        if [ "$CONFIG_LIST" ]; then
            rm -rf ${DOTFILE_PATH}/.config/${PKGS}
            if [ $? -eq 0 ]; then
                echo "($number/$totalnumber) $PKGS has been removed from dotfiles"
            else
                echo "($number/$totalnumber) failed to remove $PKGS from dotfiles"
            fi
        else
            echo "there's no folder nor files named $PKGS in the dotfiles."
        fi
        number=$(($number + 1))
    done
}

function sync() {
    echo ":: retrieving configurations..."
    totalnumber=0
    number=1
    for PKGS in ${choice[@]}; do
        totalnumber=$(($totalnumber + 1))
    done
    for PKGS in ${choice[@]}; do
        if [ "$(ls ${DOTFILE_PATH}/.config/$PKGS &>/dev/null)" ]; then remove &>/dev/null; fi

        if [ -d "${CONFIG_PATH}/${PKGS}" ]; then mkdir -p ${DOTFILE_PATH}/.config/${PKGS}; fi
        cp -rf ${CONFIG_PATH}/$PKGS ${DOTFILE_PATH}/.config
        if [ $? -eq 0 ]; then
            echo "(${number}/${totalnumber}) $PKGS succesfully copied into dotfiles"
        else
            echo "(${number}/${totalnumber}) failed to copy $PKGS into the dotfiles"
        fi
        number=$(($number + 1))
    done

}

function apply() {
    echo ":: retrieving configurations..."
    totalnumber=0
    number=1
    for PKGS in ${choice[@]}; do
        totalnumber=$(($totalnumber + 1))
    done
    for PKGS in ${choice[@]}; do
        if [ "$(ls ${CONFIG_PATH}/${PKGS} &>/dev/null)" ]; then 
            rm -rf ${CONFIG_PATH}/${PKGS} &>/dev/null
        fi

        if [ -d "${DOTFILE_PATH}/.config/${PKGS}" ]; then mkdir -p ${CONFIG_PATH}/${PKGS}; fi
        cp -rf ${DOTFILE_PATH}/.config/$PKGS ${CONFIG_PATH}
        if [ $? -eq 0 ]; then
            echo "(${number}/${totalnumber}) $PKGS success applied into the local"
        else
            echo "(${number}/${totalnumber}) failed to apply $PKGS into the local"
        fi
        number=$(($number + 1))
    done
}

function symlink() {
    echo ":: retrieving configurations..."
    totalnumber=0
    number=1
    for PKGS in ${choice[@]}; do
        totalnumber=$(($totalnumber + 1))
    done
    for PKGS in ${choice[@]}; do
        rm -rf ${CONFIG_PATH}/${PKGS} &>/dev/null
        for folders in $(find ${DOTFILE_PATH}/.config/${PKGS} -type d); do
            folders=$(echo $folders | sed "s|${DOTFILE_PATH}/.config/||")
            mkdir -p ${CONFIG_PATH}/${folders}
        done
        for files in $(find ${DOTFILE_PATH}/.config/${PKGS} -type f); do
            files=$(echo $files | sed "s|${DOTFILE_PATH}/.config/||")
            ln -s ${DOTFILE_PATH}/.config/${PKGS} ${CONFIG_PATH}/${files} 
        done
        if [ $? -eq 0 ]; then
            echo "(${number}/${totalnumber}) $PKGS succesfully overwrited & symlinked"
        else
            echo "(${number}/${totalnumber}) failed to overwrite & symlinks the $PKGS"
        fi
        number=$(($number + 1))
    done
}

function syncall() {
    echo ":: Synchronizing dotfiles with the configs..."
    echo ":: Starting full dotfiles update..."
    echo "checking the dotfiles..."
    echo "looking for conflicting configs..."
    echo ""
    rm -rf /tmp/syncall &>/dev/null
    for PKGS in $(command ls ${DOTFILE_PATH}/.config); do
        size=$(du -sh ${CONFIG_PATH}/$PKGS | awk '{print $1}')
        dotfilesize=$(du -sh $DOTFILE_PATH | awk '{print $1}')
        number=$(($number + 1))
        echo $PKGS >> /tmp/syncall
    done
    echo "Packages: (${number}) $(echo $(cat /tmp/syncall))"
    echo ""
    echo "Current Dotfiles Size: $dotfilesize"
    echo ""
    echo -n ":: Proceed to Sync All? it'll overwrite modified configs! [Y/n] "
    read answer
    case $answer in 
        [yY]) confirm="yes" ;; 
        [nN]) confirm="no" ;; 
        *) confirm="yes" ;; 
    esac

    if [ "$confirm" = yes ]; then
        echo ":: Retrieving configs..."
        totalnumber=0
        number=1
        for PKGS in $(command ls ${DOTFILE_PATH}/.config); do
            totalnumber=$(($totalnumber + 1))
        done
        for PKGS in $(command ls ${DOTFILE_PATH}/.config); do
            rm -rf ${DOTFILE_PATH}/.config/${PKGS} && \
            if [ -d "${CONFIG_PATH}/${PKGS}" ]; then mkdir -p ${DOTFILE_PATH}/.config/${PKGS}; fi
            cp -rf ${CONFIG_PATH}/$PKGS ${DOTFILE_PATH}/.config/
            if [ $? -eq 0 ]; then
                echo "($number/$totalnumber) succesfully updated $PKGS"
            else
                echo "($number/$totalnumber) failed to update da $PKGS"
            fi
            number=$(($number + 1))
        done
    else
        echo "Process cancelled"
    fi
}

function applyall() {
    echo ":: Checking the dotfiles..."
    echo ":: looking for conflicting configs..."
    echo ""
    rm -rf /tmp/applyall &>/dev/null
    for PKGS in $(command ls ${DOTFILE_PATH}/.config); do
        dotsize=$(du -sh ${DOTFILE_PATH} | awk '{print $1}')
        configsize=$(du -sh $CONFIG_PATH | awk '{print $1}')
        totalnumber=$(($totalnumber + 1))
        echo $PKGS >> /tmp/applyall
    done

    echo "Packages: (${totalnumber}) $(echo $(cat /tmp/applyall))"
    echo ""
    echo "Current dotfile Size: $dotsize"
    echo "Current .config Size: $configsize"
    echo ""
    echo -n ":: Proceed to Apply All? it'll delete current configurations! [Y/n] "
    read answer
    case $answer in 
        [yY]) confirm="yes" ;; 
        [nN]) confirm="no" ;; 
        *) confirm="yes" ;; 
    esac

    if [ "$confirm" = yes ]; then
        echo ":: Retrieving configs..."
        echo "$totalnumber"
        number=1
        for PKGS in $(command ls ${DOTFILE_PATH}/.config); do
            rm -rf ${CONFIG_PATH}/${PKGS} && \
            cp -rf ${DOTFILE_PATH}/.config/${PKGS} ${CONFIG_PATH}/
            if [ $? -eq 0 ]; then
                echo "($number/$totalnumber) succesfully applied $PKGS"
            else
                echo "($number/$totalnumber) failed to apply the $PKGS"
            fi
            number=$(($number + 1))
        done
    else
        echo "Process cancelled"
    fi
}

function list() {
    JARAK=30
    BLUE="\033[1;34m"
    BLACK="\033[0;30m"
    NONE="\033[0m"
    YUSN=$(echo $(whoami))
    DOTFPTH=$(echo ${DOTFILE_PATH} | sed "s|/home/${YUSN}|~|")
    printf "${BLACK}##${NONE}[${BLUE}Dotman - Configs${NONE}] ${DOTFPTH}\n"
    for list in $(ls ${DOTFILE_PATH}/.config); do
        if [ -d "${DOTFILE_PATH}/.config/$list" ]; then
                printf "${BLACK}-- ${BLUE} "
                printf "$(printf "%-${JARAK}s" "$list")${NONE}\n"
        elif [ -f "${DOTFILE_PATH}/.config/$list" ]; then
                printf "${BLACK}-- ${NONE} "
                printf "$(printf "%-${JARAK}s" "$list")\n"
        else
            echo "there's nothing in your dotfiles($dotfile_path)."
            echo "start syncing your configuration using 'dotman sync'"
        fi
    done
}

function confirmation() {
    if [ -n "$choice" ]; then
        number=0
        case $thingstodo in
            remove) 
                echo "checking the dotfiles..."
                echo ""
                for PKGS in ${choice[@]}; do
                    size=$(du -sh ${DOTFILE_PATH}/.config/$PKGS | awk '{print $1}')
                    number=$(($number + 1))
                done
                echo "Packages (${number}) $choice"
                echo ""
                echo "Total Removed Size: $size"
                echo ""
                echo -n ":: Are you sure to remove ($choice) from dotfiles? [Y/n] " 
                ;;
            sync) 
                echo "checking the dotfiles..."
                echo "looking for conflicting packages..."
                for PKGS in ${choice[@]}; do
                    size=$(du -sh ${CONFIG_PATH}/$PKGS | awk '{print $1}')
                    dotfilesize=$(du -sh $DOTFILE_PATH | awk '{print $1}')
                    if $(ls ${DOTFILE_PATH}/.config/$PKGS &>/dev/null); then 
                        echo "warning: $PKGS already in the dotfiles -- overwriting"
                    fi
                    number=$(($number + 1))
                done
                echo ""
                echo "Packages (${number}) $choice"
                echo ""
                echo "Package Configs Size: $size"
                echo "Current Dotfiles Size: $dotfilesize"
                echo ""
                echo -n ":: Proceed to sync [Y/n] " 
                ;;
            apply)
                echo "checking the dotfiles..."
                echo "looking for conflicting folders..."
                for PKGS in ${choice[@]}; do
                    size=$(du -sh ${DOTFILE_PATH}/.config/$PKGS | awk '{print $1}')
                    configsize=$(du -sh $CONFIG_PATH | awk '{print $1}')
                    if $(ls ${DOTFILE_PATH}/.config/$PKGS &>/dev/null); then 
                        echo "warning: $PKGS already in the local -- overwriting"
                    fi
                    number=$(($number + 1))
                done
                echo ""
                echo "Packages (${number}) $choice"
                echo ""
                echo "Package Configs Size: $size"
                echo "Current Local(.config) Size: $configsize"
                echo ""
                echo ":: This Process will replace the configuration on the local with the dotfiles."
                echo -n ":: Proceed to apply [Y/n] " 
                ;;
            symlink)
                echo "checking the dotfiles..."
                echo "looking for conflicting folders..."
                for PKGS in ${choice[@]}; do
                    size=$(du -sh ${DOTFILE_PATH}/.config/$PKGS | awk '{print $1}')
                    configsize=$(du -sh $CONFIG_PATH | awk '{print $1}')
                    if $(ls ${DOTFILE_PATH}/.config/$PKGS &>/dev/null); then 
                        echo "warning: $PKGS already in the local -- replacing"
                    fi
                    number=$(($number + 1))
                done
                echo ""
                echo "Packages (${number}) $choice"
                echo ""
                echo "Package Configs Size: $size"
                echo "Current Local(.config) Size: $configsize"
                echo ""
                echo ":: This Process will replace the configuration on the local with the dotfiles."
                echo -n ":: Proceed to Symlinking? [Y/n] " 
                ;;
        esac
        read answer
        case $answer in
            [yY]) confirm="yes" ;;
            [nN]) confirm="no" ;;
            *) confirm="yes" ;;
        esac
    else
        echo "Please input the package name!"
    fi
}

function help() {
echo "usage:  dotman <operation> [...]
operations:
    dotman {-h --help help}
    dotman {-l --list list}
    dotman {--set set}              <path for dotfiles>
    dotman {-R --remove remove}     <package(s)>
    dotman {-S --sync sync}         <package(s)>
    dotman {-A --apply apply}       <package(s)>
    dotman {-Sl --symlink symlink}  <package(s)>
    dotman {-Syu --syncall syncall}
    dotman {-Ayu --applyall applyall}

use 'dotman help' to show this page"
}

# Run it!
if [ -n "$option" ]; then
    case $option in
        -[lL]|--list|list) list ;;
        -[hH]|--help|help) help ;;
        --set|set) set ;;
        -[rR]|-[rR][mM]|--remove|remove) thingstodo="remove"; confirmation; if [ "$confirm" = yes ]; then remove; fi ;;
        -[sS]|--sync|sync) thingstodo="sync"; confirmation; if [ "$confirm" = yes ]; then sync; fi ;;
        -[aA]|--apply|apply) thingstodo="apply"; confirmation; if [ "$confirm" = yes ]; then apply; fi ;;
        -[sS][lL]|--symlink|symlink) thingstodo="symlink"; confirmation; if [ "$confirm" = yes ]; then symlink; fi ;;
        -[sS][yY][uU]|-[sS][yY]|-[sS][uU]|--syncall|syncall) syncall ;;
        -[aA][yY][uU]|--applyall|applyall) applyall ;;
        *) echo "wrong input (use 'dotman help' for help)" ;;
    esac
else
    echo "no operation specified (use 'dotman help' for help)"
fi
